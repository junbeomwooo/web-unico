<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MemberMapper">
    
    <!-- 유저번호를 통한 한 명의 회원 정보 조회를 위한 기능 -->
    <select id="selectItem">
        SELECT userno, account, userpw, name, gender, birthdate, phonenumber, address, city, zipcode,  province, country, reg_date, is_out, is_admin FROM member WHERE userno = #{userno};
    </select>

    <!-- 다중행 회원정보 조회 -->
    <select id="selectList">
        SELECT 
        m.userno,
        m.account,
        m.userpw,
        m.name,
        m.gender,
        m.birthdate,
        m.phonenumber,
        m.address,
        m.city,
        m.zipcode,
        m.province,
        m.country,
        m.reg_date,
        m.is_out,
        m.is_admin,
        SUM(od.tprice) AS total_payment
        FROM member m
        LEFT OUTER JOIN order_detail od ON m.userno = od.member_userno
        <where>
            <if test="account != null and account != ''">
                m.account LIKE concat('%', #{account}, '%')
            </if>
            <if test="gender != null">
                AND m.gender = #{gender}
            </if>
            <if test="query != null and query != ''">
                AND m.name LIKE concat('%', #{query}, '%')
            </if>
        </where>
        GROUP BY m.userno
        <!-- 정렬 순을 위해 -->
        <if test="sortOption != null and sortOption != ''">
              <choose>
                <when test="sortOption === 'descend'">
                ORDER BY total_payment DESC
                </when>
                <when test="sortOption === 'ascend'">
                ORDER BY total_payment ASC
                </when>
                <otherwise>
                ORDER BY userno ${sortOption}
                </otherwise>
            </choose>
        </if>
        <!-- 페이지 구현을 위한 LIMIT절 추가, 보안에 취약하지만 limit절은 '%'사용불가, listCount가 존재하거나 0보다 클 경우에만 실행--> 
        <if test="listCount > 0">
            LIMIT ${offset}, ${listCount} 
        </if>
    </select>
    
    <!-- 회원정보 저장 -->
     <insert id="insertItem">
        INSERT INTO member (account, userpw, name, gender, birthdate, phonenumber, address, city, zipcode, province, country, reg_date, is_out, is_admin) 
        VALUES (#{account}, #{userpw}, #{name}, #{gender}, #{birthdate}, #{phonenumber}, #{address}, #{city}, #{zipcode}, #{province}, #{country}, #{reg_date}, #{is_out}, #{is_admin})
     </insert>

        <!-- 계정 탈퇴 시 is_out 업데이트 -->
        <update id="updateIsOut">
            UPDATE member SET is_out = 'Y' WHERE userno = #{userno};
        </update>

        <!-- out member 테이블에 데이터 추가 -->
        <insert id='insertOutMember'>
            INSERT INTO out_member (member_userno, out_date) VALUES (#{userno}, #{out_date});
        </insert>

        <!-- 회원정보 삭제 -->
        <delete id="deleteItem">
            DELETE FROM member 
            WHERE userno=#{userno};
        </delete>
        
        <!-- Out_Member 테이블 데이터 삭제 -->
        <delete id="deleteOutMember">
            DELETE FROM out_member WHERE member_userno = #{userno};
        </delete>

        <!-- 카트 정보 삭제 -->
        <delete id="deleteCart">
            DELETE FROM cart WHERE member_userno = #{userno};
        </delete>

    <!-- Account값을 통한 자기자신 정보 수정-->
    <update id="updateMyInfo">
        UPDATE member SET name=#{name}, gender=#{gender}, birthdate=#{birthdate}, phonenumber=#{phonenumber}, address=#{address}, city=#{city}, zipcode=#{zipcode}, province=#{province}, country=#{country}
        WHERE account=#{account};
    </update>

    <!-- PK값을 통한 회원정보 수정 (등록일자는 변경되어선 안되서 제외시킴)-->
    <update id="updateItem">
        UPDATE member SET account=#{account}, userpw=#{userpw}, name=#{name}, gender=#{gender}, birthdate=#{birthdate}, phonenumber=#{phonenumber}, address=#{address}, city=#{city}, zipcode=#{zipcode}, province=#{province}, country=#{country}, is_out=#{is_out}, is_admin=#{is_admin}
        WHERE userno=#{userno};
    </update>

    <!-- 세션값을 통한 현재 로그인한 계정의 비밀번호 변경 -->
    <update id="changeMyPassword">
        UPDATE member SET userpw=#{userpw} WHERE account=#{account};
    </update>

    <!-- 중복 아이디 확인 -->
    <select id="checkAccountDuplicate">
        SELECT COUNT(*) AS cnt FROM member WHERE account=#{account};
    </select>

    <!-- 계정 이름을 통한 한 명의 회원 정보 조회를 위한 기능 -->
    <select id="searchAccount">
        SELECT userno, account, userpw, name, gender, birthdate, phonenumber, address, city, zipcode, province, country, reg_date, is_out, is_admin FROM member WHERE account = #{account};
    </select>


    <!-- 회원정보 데이터 수 조회 -->
    <select id="selectCountAll">
        SELECT COUNT(*) AS cnt FROM member
        <where>
            <if test="gender != null and gender !=''">
                gender=#{gender}
            </if>
            <if test="query != null and query != ''">
                AND name LIKE concat('%', #{query}, '%')
            </if>
        </where>
    </select>

</mapper>